xpath => path of the element in the page DOM
how to traverse the page DOM tree to find the needed element

Golden Formula (Relative Xpath):***************
//tagName[@attribute='value']

Index:******
(//tagName[@attribute='value'])[1]

contains():******
//tagName[contains(@attribute,'value')]

starts-with():
//tagName[starts-with(@attribute,'value')]

text():
//tagName[text()='value']

.:
//tagName[.='value']
//tagName[contains(.,'value')]

or:
//tagName[@attribute='value' or @attribute='value2']

and:
//tagName[@attribute='value'][@attribute2='value2']
//tagName[@attribute='value' and @attribute2='value2']

any:
//*[@attribute='value']

--> never use right-click copy xpath
--> never use the index unless explicitly stated
--> never use class equals if there are multiple class names
--> never use text if the web application supports multiple languages

xpath = //tagName[@attribute='value']
css = tagName[attribute='value']
xpath = //tagName[@id='value']
css = tagName#value
xpath = //tagName[@class='value']
css = tagName.value

allure report:
Configure system environment variables: JAVA_HOME and path
Install Node.js and NPM
Go to the root directory of the project for which you want to use Allure Report. Run this command: npm install --save-dev allure-commandline
execute mvn verify to run your test
execute npx allure-commandline serve to open the report
press ctrl+c to close the temp server once you're done

execute" npx allure-commandline generate --single-file allure-results "to generate a single html file for your allure report


3 ways to configure Listenenr
1- add to class by use :@Listeners(CustomListener.class)
2- adding in run configure
3- adding in xml file

page object model => for every page they have class.
Assert belong test class and other interaction belong pages class